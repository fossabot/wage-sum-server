/*
 * Employee wage sum
 *
 * Wage sum - demo application with GO language
 *
 * API version: 1.0.0
 * Contact: lsmhun@github
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package service

import (
	"context"
	"errors"
	"net/http"

	db "github.com/lsmhun/wage-sum-server/internal/pkg/db"
	openapi "github.com/lsmhun/wage-sum-server/internal/pkg/openapi"
	"gorm.io/gorm"
)

// EmpApiService is a service that implements the logic for the EmpApiServicer
// This service should implement the business logic for every endpoint for the EmpApi API.
// Include any external packages or services that will be required by this service.
type EmpApiService struct {
	empDb db.EmpDb
}

// NewEmpApiService creates a default api service
func NewEmpApiService(e db.EmpDb) openapi.EmpApiServicer {
	return &EmpApiService{
		empDb: e,
	}
}

// GetEmpById - Find employee by ID
func (s *EmpApiService) GetEmpById(ctx context.Context, empId int64) (openapi.ImplResponse, error) {
	empById, err := s.empDb.FindEmployeeById(empId)
	if err == nil {
		return openapi.Response(200, empById), nil
	} else {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return openapi.Response(404, nil), nil
		}
		return openapi.Response(http.StatusInternalServerError, nil), err
	}
}

// AddEmp - Add a new emp to the store
func (s *EmpApiService) AddEmp(ctx context.Context, emp openapi.Emp) (openapi.ImplResponse, error) {
	// TODO - update AddEmp with the required logic for this service method.
	// Add api_emp_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response openapi.Response(200, Emp{}) or use other options such as http.Ok ...
	//return openapi.Response(200, Emp{}), nil

	//TODO: Uncomment the next line to return response openapi.Response(405, {}) or use other options such as http.Ok ...
	//return openapi.Response(405, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("AddEmp method not implemented")
}

// DeleteEmp - Deletes a emp
func (s *EmpApiService) DeleteEmp(ctx context.Context, empId int64, apiKey string) (openapi.ImplResponse, error) {
	_, err := s.empDb.DeleteEmp(empId)
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, nil), err
	}
	return openapi.Response(200, empId), nil
}

// FindEmpsByType - Finds emps by type
func (s *EmpApiService) FindEmpsByType(ctx context.Context, type_ string) (openapi.ImplResponse, error) {
	// TODO - update FindEmpsByType with the required logic for this service method.
	// Add api_emp_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response openapi.Response(200, []Emp{}) or use other options such as http.Ok ...
	//return openapi.Response(200, []Emp{}), nil

	//TODO: Uncomment the next line to return response openapi.Response(400, {}) or use other options such as http.Ok ...
	//return openapi.Response(400, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("FindEmpsByType method not implemented")
}

// UpdateEmp - Update an existing emp
func (s *EmpApiService) UpdateEmp(ctx context.Context, emp openapi.Emp) (openapi.ImplResponse, error) {
	empById, err := s.empDb.CreateOrUpdateEmp(emp)
	if err == nil {
		return openapi.Response(200, empById), nil
	} else {
		return openapi.Response(http.StatusInternalServerError, nil), err
	}
}

// UpdateEmpWithForm - Updates a emp in the store with form data
func (s *EmpApiService) UpdateEmpWithForm(ctx context.Context, empId int64, name string, status string) (openapi.ImplResponse, error) {
	// TODO - update UpdateEmpWithForm with the required logic for this service method.
	// Add api_emp_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response openapi.Response(405, {}) or use other options such as http.Ok ...
	//return openapi.Response(405, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("UpdateEmpWithForm method not implemented")
}
