/*
 * Employee wage sum
 *
 * Wage sum - demo application with GO language
 *
 * API version: 1.0.0
 * Contact: lsmhun@github
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	//"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// EmpApiController binds http requests to an api service and writes the service results to the http response
type EmpApiController struct {
	service      EmpApiServicer
	errorHandler ErrorHandler
}

// EmpApiOption for how the controller is set up.
type EmpApiOption func(*EmpApiController)

// WithEmpApiErrorHandler inject ErrorHandler into controller
func WithEmpApiErrorHandler(h ErrorHandler) EmpApiOption {
	return func(c *EmpApiController) {
		c.errorHandler = h
	}
}

// NewEmpApiController creates a default api controller
func NewEmpApiController(s EmpApiServicer, opts ...EmpApiOption) Router {
	controller := &EmpApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the EmpApiController
func (c *EmpApiController) Routes() Routes {
	return Routes{
		{
			"GetEmpById",
			strings.ToUpper("Get"),
			"/v1/emp/{empId}",
			c.GetEmpById,
		},
	}
}

// GetEmpById - Find employee by ID
func (c *EmpApiController) GetEmpById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	empIdParam, err := parseInt64Parameter(params["empId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetEmpById(r.Context(), empIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
